# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

networks:
  app-network:
    driver: bridge
services:
  nginx1:
    build: 
      context: ./nginx1
    container_name: nginx1  
    networks:
      - "app-network"
    ports:
      - "8080:3000"
  nginx2:
    build: 
      context: ./nginx2
    container_name: nginx2  
    networks:
      - "app-network"
    ports:
      - "8081:3000"
  node1:
    depends_on:
    - nginx1
    build:
      context: ./node
    hostname: "node1"
    container_name: node1
    networks:
      - "app-network"
    environment:
      NODE_ENV: production

  node2:
    depends_on:
    - nginx1
    build:
      context: ./node
    hostname: "node2"
    container_name: node2
    networks:
      - "app-network"
    environment:
      NODE_ENV: production

  node3:
    depends_on:
    - nginx1
    build:
      context: ./node
    hostname: "node3"
    container_name: node3
    networks:
      - "app-network"
    environment:
      NODE_ENV: production

  node4:
    depends_on:
    - nginx1
    build:
      context: ./node
    hostname: "node4"
    container_name: node4
    networks:
      - "app-network"
    environment:
      NODE_ENV: production

  node5:
    depends_on:
    - nginx2
    build:
      context: ./node
    hostname: "node5"
    container_name: node5
    networks:
      - "app-network"
    environment:
      NODE_ENV: production

  node6:
    depends_on:
    - nginx2
    build:
      context: ./node
    hostname: "node6"
    container_name: node6
    networks:
      - "app-network"
    environment:
      NODE_ENV: production

  node7:
    depends_on:
    - nginx2
    build:
      context: ./node
    hostname: "node7"
    container_name: node7
    networks:
      - "app-network"
    environment:
      NODE_ENV: production

  node8:
    depends_on:
    - nginx2
    build:
      context: ./node
    hostname: "node8"
    container_name: node8
    networks:
      - "app-network"
    environment:
      NODE_ENV: production

  
      
    

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

